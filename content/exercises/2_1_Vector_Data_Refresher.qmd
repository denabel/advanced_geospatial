---
title: "Exercise 2_1: Vector Data Refresher"
subtitle: 'Advanced Geospatial Data Processing for Social Scientists'
author: Dennis Abel & Stefan J√ºnger
format: 
  html:
    embed-resources: true
    code-copy: true
execute:
  echo: true
editor: visual
callout-icon: false
callout-appearance: minimal
editor_options: 
  chunk_output_type: console
---

In these three exercises, you‚Äôll refresh your knowledge about geospatial vector data using `R`. We‚Äôll start with some basics on importing and handling vector data, and then explore how to link datasets together ‚Äî even when the data doesn‚Äôt always match perfectly.

Along the way, you‚Äôll have the chance to explore, experiment, and solve problems that come up, like working with different coordinate reference systems (CRS).

Let‚Äôs get started and have some fun with spatial data! üåç‚ú®

### Exercises

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 1

Import a polygon vector shapefile from the `./data` folder. After loading, take a moment to explore it: How many features are there? What attributes are included? What is the coordinate reference system (CRS)? Feel free to also plot the data and have a first visual look at it!
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

Shapefiles include a file with the extension `.shp`. You can use the `sf` package and the `sf::st_read()` function to import the data. Hint: If you want a cleaner output, you can set `quiet = TRUE`.
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 2

Import the file `synthetic_coordinates.csv` from the `./data` folder. It contains point coordinates, but it‚Äôs not yet an `sf` object! After loading, convert it into a proper spatial object by assigning coordinates and a CRS. (Feel free to plot the points afterward if you like!)
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

First, read the table using `read.csv()` or `readr::read_csv()`. Then use `sf::st_as_sf()` to create a spatial object, specifying the coordinate columns and CRS (e.g., 4326 for WGS84 if needed).
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 3

Let‚Äôs connect the two datasets you imported! Join the points from `synthetic_coordinates.csv` with the polygons you loaded earlier, adding the `AGS` column from the polygon dataset to the points.
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

Beware: The coordinate reference systems (CRS) of the two datasets are different! Make sure they match before trying to perform the spatial join ‚Äî otherwise, you might get an error (and that‚Äôs totally fine ‚Äî part of the learning!).

-   Check the CRS of both datasets with `sf::st_crs()`.
-   Use `sf::st_transform()` to bring one dataset into the CRS of the other.
-   For the join, you can use `sf::st_join()`.

You could also transform the polygons instead of the points ‚Äî it depends on what fits better. Always double-check that geometries line up properly after transformation (e.g., by plotting)!
:::

### Solutions

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 1

```{r}
#| eval: false
library(sf)

# Load polygon data
polygon_data <- sf::st_read(".data/VG250_KRS.shp", quiet = TRUE)

# Explore the object
print(polygon_data)        # View basic information
sf::st_crs(polygon_data)        # Check the coordinate system
nrow(polygon_data)          # Number of features

# Optional: visualize it!
plot(sf::st_geometry(polygon_data))
```

```{r}
#| echo: false
library(sf)

# Load polygon data
polygon_data <- sf::st_read("../../data/VG250_KRS.shp", quiet = TRUE)

# Explore the object
print(polygon_data)        # View basic information
sf::st_crs(polygon_data)        # Check the coordinate system
nrow(polygon_data)          # Number of features

# Optional: visualize it!
plot(sf::st_geometry(polygon_data))
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 2

```{r}
#| eval: false
library(sf)
library(readr)

# Load the table
coords_df <- read_csv("./data/synthetic_coordinates.csv")

# Convert to sf object
points_sf <- 
  sf::st_as_sf(
    coords_df,
    coords = c("x", "y"),
    crs = 4326
  )

# Optional: visualize it!
plot(points_sf)
```

```{r}
#| echo: false
library(sf)
library(readr)

# Load the table
coords_df <- readr::read_csv("../../data/synthetic_coordinates.csv")

# Convert to sf object
points_sf <- 
  sf::st_as_sf(
    coords_df,
    coords = c("x", "y"),
    crs = 3035
  )

# Optional: visualize it!
plot(points_sf)
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 3

```{r}
# Check CRS
sf::st_crs(points_sf)
sf::st_crs(polygon_data)

# Transform points to match polygons
points_transformed <- 
  sf::st_transform(points_sf, crs = sf::st_crs(polygon_data))

# Spatial join
points_with_AGS <- sf::st_join(points_transformed, polygon_data[, "AGS"])

# Check result
head(points_with_AGS)
```
:::
