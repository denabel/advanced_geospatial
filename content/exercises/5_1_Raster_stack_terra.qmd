---
title: "Exercise 5_1: Raster stack with terra"
subtitle: 'Advanced Geospatial Data Processing for Social Scientists'
author: Dennis Abel & Stefan JÃ¼nger
format: 
  html:
    embed-resources: true
    code-copy: true
execute:
  echo: true
editor: visual
callout-icon: false
callout-appearance: minimal
---

### Exercises

Building on our previous mapping exercise with Texas data, we want to continue to work with that region. Our aim is to create a raster stack (`SpatRaster`) for Texas population data between 2017 and 2020.

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 1

Load the four population raster layers for Texas 2017-2020 (`./data/US-TX_ppp_2017_1km.tif`-`./data/US-TX_ppp_2020_1km.tif`) with `terra::rast()` and integrate these into one raster stack. Either do this in two steps or by creating a file list and directly read these GeoTiffs as a stack.
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 2

Adjust the variable names (`names()`) and time (`time()`) of the raster stack.
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 3

Similar to the previous exercise, let's reproject our Texas data to EPSG:3081.
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 4

Visualize all four years with a spatial window of `x = 0:1000` and `y = 0:1000`.
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 5

Export your `SpatRaster` with `writeRaster()` as GeoTiff to your local storage.
:::

### Solutions

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 1

```{r}
#| eval: false
library(dplyr)
library(ggplot2)
library(terra)
library(tidyterra)

# Load the raster data
files <- list.files("./data", pattern = "US-TX_ppp_20(17|18|19|20)_1km\\.tif$", full.names = TRUE)

TX_pop_stack <- terra::rast(files)

TX_pop_stack
```

```{r}
#| echo: false
library(dplyr)
library(ggplot2)
library(terra)
library(tidyterra)

# Load the raster data
files <- list.files("../../data", pattern = "US-TX_ppp_20(17|18|19|20)_1km\\.tif$", full.names = TRUE)

TX_pop_stack <- terra::rast(files)

TX_pop_stack
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 2

```{r}
# Adjust variable time
layer_years <- c(2017:2020)
time(TX_pop_stack, tstep = "years") <- layer_years

# Adjust variable name
names(TX_pop_stack) <- paste0("pop_", layer_years)

print(TX_pop_stack)
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 3

```{r}
TX_pop_stack <- terra::project(TX_pop_stack, "EPSG:3081")

```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 4

```{r}
# Plot a single layer
terra::plot(TX_pop_stack[0:1000,
                         0:1000, 
                         1:4,
                         drop = FALSE])
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 5

```{r}
#| eval: false
# Export
writeRaster(
  TX_pop_stack,
  "./data/TX_pop_stack.tif",
  overwrite=TRUE,
  gdal=c("COMPRESS=LZW","BIGTIFF=YES")
)
```

```{r}
#| echo: false
# Export
writeRaster(
  TX_pop_stack,
  "../../data/TX_pop_stack.tif",
  overwrite=TRUE,
  gdal=c("COMPRESS=LZW","BIGTIFF=YES")
)
```
:::
