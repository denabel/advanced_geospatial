---
title: "Exercise 3_2: Extracting and Analyzing Raster Information"
subtitle: 'Advanced Geospatial Data Processing for Social Scientists'
author: Dennis Abel & Stefan Jünger
format: 
  html:
    embed-resources: true
    code-copy: true
execute:
  echo: true
editor: visual
callout-icon: false
callout-appearance: minimal
editor_options: 
  chunk_output_type: console
---

In this set of exercises, you'll focus on linking raster data, aggregating them to a coarser resolution, creating heatmaps using spatial smoothing, and linking processed raster data with your synthetic geocoordinates. You will:

-   Aggregate raster data to a larger grid (e.g., 5 km resolution).
-   Use a focal operation to create a heatmap and visualize spatial patterns.
-   Link the aggregated raster back to your geocoordinates for further analysis.

### Exercises

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 1

Your first task is to import a dataset of synthetic geographic coordinates. The file is called `synthetic_geocoordinates.rds` and it’s located in the `./data/` folder.

Next, choose another raster `.tif` dataset from the `./data/z22/` folder to use in subsequent tasks.

This exercise will lay the foundation for combining vector and raster data in the next steps.
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

-   Use `readRDS()` to load the `.rds` file.
-   To load a raster, use `terra::rast()`.
-   After loading the data, inspect the structure of the synthetic coordinates, e.g., with `str()` and check the raster’s properties with `plot()`.
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 2

In this exercise, you’ll extract raster values at the locations of the synthetic coordinates you loaded previously. But here’s the twist: Think about the surrounding area!

Use buffers or a spatial filter (like `terra::focal()`) to capture information around each point, not just at the point itself. This will help you get a broader view of the raster values in the neighborhood of your coordinates.

Important: You may notice that the CRS of the points and the CRS of the raster don’t align. You will need to adjust the CRS of your points to match the raster's CRS to correctly extract values.
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

-   You can use `terra::extract()` to pull raster values at specific coordinates.
-   To consider the surrounding area, use `terra::focal()` to apply a spatial filter or create buffers with `sf::st_buffer()` around your points.
-   Be creative: What size buffer makes sense for your data? Should you use a large or small neighborhood around the points? How do the values change within this window?
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 3

In this exercise, you’ll aggregate the raster data to a coarser grid, for example, a 5 km grid. Then, use a focal operation to create a heatmap, smoothing the values and representing the intensity of the raster data across the area.

Finally, link the aggregated raster data with your synthetic geocoordinates again. This will help you to understand the spatial patterns of the raster values at different resolutions.
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

-   To aggregate raster data, use `terra::aggregate()`, where you can specify the cell size.
-   Use `terra::focal()` to apply a focal operation like a moving window average, which helps smooth the data and create a heatmap effect.
-   After aggregation and smoothing, make sure to link the newly created raster back to your synthetic coordinates using `terra::extract()`.
:::

### Solutions

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 1

```{r}
#| eval: false
library(terra)

# Load the synthetic coordinates data
coordinates <- readRDS("./data/synthetic_survey_coordinates.rds")

# Inspect the coordinates structure
str(coordinates)

# Load a raster dataset from the ./data/z22 folder
foreigners <- terra::rast("./data/z22/foreigners.tif") 

# Check the raster's properties by plotting
plot(foreigners)
```

```{r}
#| echo: false
library(terra)

# Load the synthetic coordinates data
coordinates <- readRDS("../../data/synthetic_survey_coordinates.rds")

# Inspect the coordinates structure
str(coordinates)

# Load a raster dataset from the ./data/z22 folder
foreigners <- terra::rast("../../data/z22/foreigners.tif") 

# Check the raster's properties by plotting
plot(foreigners)
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 2

```{r}
library(terra)

crs_points <- sf::st_crs(coordinates)$epsg
crs_raster <- terra::crs(foreigners, describe = TRUE)$code

# If CRS do not match, project the points to the raster's CRS
if (crs_points != crs_raster) {
  coordinates <- sf::st_transform(coordinates, crs = as.numeric(crs_raster))
}

# Create a buffer around each point (optional: adjust buffer size)
buffer <- sf::st_buffer(coordinates, 5000)  # 500 meters buffer

# Plot the buffer to see the area
plot(sf::st_geometry(buffer))
plot(foreigners)

# Extract raster values at the original points
foreigners_buffer_values <- terra::extract(foreigners, coordinates)

# Extract surrounding raster information using a focal filter (example with a 3x3 window)
foreigners_focal <- 
  terra::focal(foreigners, w = matrix(1, 5, 5), fun = mean, na.rm = TRUE)

foreigners_focal_values <- 
  terra::extract(foreigners_focal, coordinates)

# View extracted values for points and surrounding context
head(foreigners_buffer_values)
head(foreigners_focal_values)
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 3

```{r}
# Aggregate the raster to a 5 km grid (adjusting the cell size)
foreigners_aggregated <- 
  terra::aggregate(foreigners, fact = 5, na.rm = TRUE)

# Create a heatmap effect by applying a focal operation (e.g., 5x5 moving average)
foreigners_heatmap <- 
  terra::focal(
    foreigners_aggregated, w = matrix(1, 5, 5), fun = mean, na.rm = TRUE
    )

# Plot the heatmap
plot(foreigners_heatmap, main = "'Heatmap' of Aggregated Raster")

# Link the aggregated raster with the synthetic geocoordinates
aggregated_values <- terra::extract(foreigners_heatmap, coordinates)

# Inspect the extracted values for the points
head(aggregated_values)
head(foreigners_buffer_values)
head(foreigners_focal_values)
```
:::
